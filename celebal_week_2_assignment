{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvIYa7wejcxhYPooAMUNzy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pritam1309/Celebal_assignment/blob/main/celebal_week_2_assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/capitalize/problem?isFullScreen=true\n"
      ],
      "metadata": {
        "id": "N7V1FdQpEqqX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import os\n",
        "import random\n",
        "import re\n",
        "import sys\n",
        "\n",
        "def solve(s):\n",
        "    r=list(s.split(\" \"))\n",
        "    m=\"\"\n",
        "    for i in range(0,len(r)):\n",
        "        m=m+r[i].capitalize()+\" \"\n",
        "    return m\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n",
        "\n",
        "    s = input()\n",
        "\n",
        "    result = solve(s)\n",
        "\n",
        "    fptr.write(result + '\\n')\n",
        "\n",
        "    fptr.close()"
      ],
      "metadata": {
        "id": "0fLacaRGKkzT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/py-introduction-to-sets/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "ru9U5y9dFb2A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def average(array):\n",
        "    heights = set(array)\n",
        "    distinct_average = sum(heights) / len(heights)\n",
        "    return distinct_average\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    n = int(input())\n",
        "    arr = list(map(int, input().split()))\n",
        "    result = average(arr)\n",
        "    print(result)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dca2KXfrFg65",
        "outputId": "a3c1e900-4f22-4b48-c9ef-43795c740872"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "161 182 161 154 176 170 167 171 170 174\n",
            "169.375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/text-wrap/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "mWkFwxcoHgDj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import textwrap\n",
        "\n",
        "def wrap(string, max_width):\n",
        "    wrapper = \"\\n\".join(textwrap.wrap(string, max_width))\n",
        "    return wrapper\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    string, max_width = input(), int(input())\n",
        "    result = wrap(string, max_width)\n",
        "    print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F6EP5c4fHfwX",
        "outputId": "1b3f5441-0b11-4f6e-b06e-69553f14a0a9"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ABCDEFGHIJKLIMNOQRSTUVWXYZ\n",
            "4\n",
            "ABCD\n",
            "EFGH\n",
            "IJKL\n",
            "IMNO\n",
            "QRST\n",
            "UVWX\n",
            "YZ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/alphabet-rangoli/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "FNGfKJN2IAD9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def print_rangoli(size):\n",
        "    smchr=97\n",
        "\n",
        "    def print_line(i):\n",
        "        t=[]\n",
        "        for j in range(i,size): t.append( chr(smchr + j) )\n",
        "        t = list(reversed(t)) + t[1:]\n",
        "        centre, sides = \"-\".join(t), '--'*i\n",
        "        print(sides+centre+sides)\n",
        "\n",
        "    for i in reversed(range(size)): print_line(i)\n",
        "    for i in range(1,size): print_line(i)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    n = int(input())\n",
        "    print_rangoli(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_cfUYeZ6H_vJ",
        "outputId": "4cb4d419-597d-466a-bd6f-c9515e3e4af1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "--------e--------\n",
            "------e-d-e------\n",
            "----e-d-c-d-e----\n",
            "--e-d-c-b-c-d-e--\n",
            "e-d-c-b-a-b-c-d-e\n",
            "--e-d-c-b-c-d-e--\n",
            "----e-d-c-d-e----\n",
            "------e-d-e------\n",
            "--------e--------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/merge-the-tools/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "9Rmags6PIiNK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def merge_the_tools(string, k):\n",
        "    for i in range(0, len(string), k):\n",
        "        substr = []\n",
        "        for j in range(i, i+k):\n",
        "            if string[j] not in substr:\n",
        "                substr.append(string[j])\n",
        "        print(''.join(substr))\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    string, k = input(), int(input())\n",
        "    merge_the_tools(string, k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODiX3u-kIh6u",
        "outputId": "2a438223-133c-4de4-e9dc-26f98ce39a71"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AABCAAADA\n",
            "3\n",
            "AB\n",
            "CA\n",
            "AD\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/collections-counter/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "IJ1Yrmx-Iqgs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "x = input()\n",
        "sizes = list(map(int, input().split()))\n",
        "sizes = Counter(sizes)\n",
        "n = int((input()))\n",
        "\n",
        "price = 0\n",
        "for _ in range(n):\n",
        "    customer = list(map(int, input().split()))\n",
        "    if customer[0] in sizes:\n",
        "        price += customer[1]\n",
        "        sizes[customer[0]] -= 1\n",
        "    if sizes[customer[0]] == 0:\n",
        "        del sizes[customer[0]]\n",
        "print(price)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nt0AZ0RIIpke",
        "outputId": "25f68f39-93ca-4c77-8359-767975257c7e"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "2 3 4 5 6 8 7 6 5 18\n",
            "6\n",
            "6 55\n",
            "6 45\n",
            "6 55\n",
            "4 40\n",
            "18 60\n",
            "10 50\n",
            "200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/exceptions/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "R9FaB6z7Ixsm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_size = int(input())\n",
        "\n",
        "for _ in range(input_size):\n",
        "    try:\n",
        "        numerator, denominator = map(int, input().split())\n",
        "        print(numerator // denominator)\n",
        "    except Exception as e:\n",
        "        print(\"Error Code:\", e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dWiS59ncIxC2",
        "outputId": "3abd0abf-76fb-42a8-ebc4-7b09618f6a61"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "1 0\n",
            "Error Code: integer division or modulo by zero\n",
            "3 5\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/incorrect-regex/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "UWJIjtJFI6D4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "for _ in range(int(input())):\n",
        "    try:\n",
        "        re.compile(input())\n",
        "        print(\"True\")\n",
        "    except re.error:\n",
        "        print(\"False\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o-gVCXuyI5Tw",
        "outputId": "224d3fc9-4b95-47e4-eebe-c41d2414a60a"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            ".*\\+\n",
            "True\n",
            ".*+\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.hackerrank.com/challenges/py-set-discard-remove-pop/problem?isFullScreen=true"
      ],
      "metadata": {
        "id": "s_AKH2PUJB63"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pdb\n",
        "m = int(input())\n",
        "lst = [int(j) for j in input().strip().split()]\n",
        "lst.reverse()\n",
        "st = set(lst)\n",
        "n = int(input())\n",
        "for _ in range(n):\n",
        "    command = input().strip().split()\n",
        "    if len(command) == 1:\n",
        "        method_to_call = getattr(st, command[0])\n",
        "        method_to_call()\n",
        "    else:\n",
        "        commd, *args = [command[0], int(command[1])]\n",
        "        getattr(st, commd)(*args)\n",
        "print(sum(st))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1i6kWsiEJBUW",
        "outputId": "dc0908e0-f3ea-4f54-cf1c-edb88dd782c4"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n",
            "1 2 3 4 5 6 7 8 9 \n",
            "10\n",
            "pop\n",
            "remove 9\n",
            "discard 9\n",
            "discard 8\n",
            "remove 7\n",
            "pop\n",
            "discard 6\n",
            "remove 5\n",
            "pop\n",
            "discard 5\n",
            "4\n"
          ]
        }
      ]
    }
  ]
}